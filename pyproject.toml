[build-system]
requires = ["uv_build>=0.7.9,<0.8.0"]
build-backend = "uv_build"

[project]
name = "gitlab-ci"
version = "0.2.0"
description = "Collection of Gitlab CI/CD workflow templates"
readme = "README.md"
authors = [
    { name = "Alexander Chaykovskiy", email = "<alexchay@gmail.com>" }
]
license = { file = "LICENSE" }
# Keywords description https://python-poetry.org/docs/pyproject/#keywords
keywords = [
    "gtilab-ci",
    "python",
    "package",
    "uv"
]
# Pypi classifiers: https://pypi.org/classifiers/
classifiers = [
    "Development Status :: 3 - Alpha",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
packages = [{ include = "gitlab_ci", from = "src" }]
requires-python = ">=3.10"
dependencies = [
    "jinja2>=3.1.2",
    "pyyaml>=6.0"
]

[project.urls]
repository = "https://github.com/alexchay/gitlab-ci"
homepage = "https://github.com/alexchay/gitlab-ci"

[project.scripts]
"gitlab-ci" = "gitlab_ci.main:main"

[tool.uv]
default-groups = []

[dependency-groups]
dev = [
    "ruff >=0.7.4, <1.0.0",
    "black >=23.3.0, <24.0.0",
    "pylint >=2.8.3, <3.0.0",
    "pylint-pytest >=1.1.2, <2.0.0",
    "mypy >=1.16.0, <2.0.0",
    "mypy-extensions >=1.0.0, <2.0.0",
    "types-termcolor == 1.1.6.2",
    "types-setuptools",
    "types-pyyaml >=6.0.12, <7.0.0",
    "pre-commit >=4.2.0, <5.0.0",
    "commitizen >=4.8.2, <5.0.0",
    "pdbpp"
]

test = [
    "pytest",
    "pytest-asyncio",
    "pytest-html >=3.1.1",
    "pytest-cov >=6.0.0",
    "pytest-custom-exit-code",
    "pytest-randomly >=3.13.0, <4.0.0",
    "coverage >=6.1.2",
    "coverage-badge >=1.1.0"
]

docs = [
    "markdown-customblocks",
    "mdx-truly-sane-lists",
    "mkdocs",
    "mkdocs-click",
    "mkdocs-drawio",
    "mkdocs-gen-files",
    "mkdocs-git-authors-plugin",
    "mkdocs-git-committers-plugin",
    "mkdocs-git-revision-date-localized-plugin>=1.2.6",
    "mkdocs-include-markdown-plugin",
    "mkdocs-literate-nav",
    "mkdocs-material",
    "mkdocstrings[python]",
    "python-frontmatter",
]

[tool.ruff]
indent-width = 4
line-length = 140
output-format = "grouped"
respect-gitignore = true
src = ["src", "tests"]
show-fixes = true
exclude = [
    ".eggs",
    ".git",
    ".mypy_cache",
    ".ruff_cache",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "venv",
]

[tool.ruff.format]
indent-style = "space"
line-ending = "lf"
quote-style = "double"
docstring-code-format = true

[tool.ruff.lint]
select = ["ALL"]
preview = true
extend-select = [
    "E",        # PyCodeStyle errors
    "W",        # PyCodeStyle warnings
    "D",        # PyCodeStyle docstring errors
    "Q",        # PyCodeStyle quality errors
    "T",        # PyCodeStyle type hints
    "F",        # PyFlakes errors
    "I",        # Sort imports (handled by isort)
    "C",        # flake8-comprehensions
    "N",        # PEP8 naming
    "B",        # flake8-bugbear
    "BLE",      # flake8-blind except
    "DOC",      # pydoclint
    "S",        # flakeu-bandit
    "UP",       #
    "C4",       # Catch incorrect use of comprehensions
    "RUF",      # Ruff-specific rules
    "NPY",      # NumPy-specific rules
    "PD",       # Pandas-vet
    "PGH",      # PyGrep hooks
    "ANN",      # flake8-annotations
    "C90",      # McCabe complexity
    "PLC",      # Pylint conventions
    "PLE",      # Pylint errors
    "PLW",      # Pylint warnings
    "TCH",      # Flake8 type-checking
]
ignore = [
    "CPY001",   # Missing copyright notice at top of file
    "D212",     # multi-line-summary-first-line
    "TRY003",   # raise-vanilla-args
    "S101",     # Use of `assert` detected
    "DOC501",   # Raised exception `...` missing from docstring
    "COM812",   # Trailing comma missing
    #"D100",     # Missing docstring in public module
    #"D104",     # Missing docstring in public f
    #"D105",     # undocumented-magic-method
    #"D106",     # undocumented-public-nested-class
    #"D107",     # undocumented-public-init
    #"D203",     # blank line required before cl
    #"D211",     # no-blank-line-before-class
    #"D213",     # multi-line-summary-second-lir
    #"D200",     # fits-on-one-line
    #"EM101",    # raw-string-in-exception
    #"FIX002",   # line-contains-todo
    #"ISC001",   # Conflicts with formatter ruff
    #"PLR0904",  # Too many public methods
    #"TD002",    # Missing author in TODO
    #"TD003",    # missing-todo-link
    #"E501",     # line too long, handled by black
    #"B008",     # do not perform function calls in argument defaults
    #"C901",     # too complex
    #"ANN002",   # missing-type-args
    #"ANN003",   # missing-type-kwargs
    #"ANN204",   # missing-return-type-special-method
    #"ANN401",   # any-type
    #"S104",     # hardcoded-bind-all-interfaces
    #"S404",     # suspicious-subprocess-import
    #"S602",     # subprocess-popen-with-shell-equals-true
    #"PD011",    # pandas-use-of-dot-values
    #"PLC0415",  # import-outside-toplevel
    #"PLW1641",  # eq-without-hash
]

fixable = ["ALL"]
unfixable = [
    "D",    # Don't fix docstyle from others
    "I",    # Don't fix imports (handled by isort)
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

typing-modules = ["typing", "types", "typing_extensions", "mypy", "mypy_extensions"]

[tool.ruff.lint.per-file-ignores]
"tests/test_*.py" = [
    "ANN",      # Ignore missing type annotations in tests
    "S101",     # Allow `assert`
    "TRY003",   # raise-vanilla-args
    "D100",     # Missing docstring in public module
    "D103",     # Missing docstring in public function
    "D104",     # Missing docstring in public package
    "ANN201",   # Missing return type annotation for public function
    "I001",     # Import block is un-sorted or un-formatted
    #"PLR0913",
    #"PLR0915",
    #"PLR2004",
    #"PLR0912",
    #"PGH003",
    #"TRY201",
    #"TRY301",
    #"PLW0603",
    #"S105"
    #"S106",
]
"__init__.py" = [
    "F401",     # Ignore unused imports in __init__.py
    "D104"
]

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.lint.isort]
order-by-type = true
known-third-party = ["fastapi", "pydantic", "starlette"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-annotations]
# Suppress ANN401 for *args and **kwargs
allow-star-arg-any = true
mypy-init-return = true
suppress-dummy-args = true
suppress-none-returning = true

[tool.black]
line-length = 140
target-version = ["py310", "py311"]
skip-string-normalization = true
# color = true
include = "\\.pyi?$"
exclude = '''
/(
    \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | env
    | venv
)/
'''

[tool.mypy]
# https://mypy.readthedocs.io/en/latest/config_file.html#using-a-pyproject-toml-file
pretty = true
show_traceback = true
color_output = true
allow_redefinition = false
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
ignore_missing_imports = true
implicit_reexport = false
no_implicit_optional = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
strict_equality = true
strict_optional = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true
ignore_errors = false

[tool.pytest.ini_options]
# https://docs.pytest.org/en/6.2.x/customize.html#pyproject-toml
# Extra options:
# https://docs.pytest.org/en/6.2.x/reference.html#configuration-options
addopts = [
    "-vv",
    "--import-mode=prepend",
    "--disable-pytest-warnings",
    "--strict-markers",
    "--tb=short",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "vault",
]
# control the event loop lifetime for async tests and to silence deprecation warnings from pytest-asyncio
asyncio_default_fixture_loop_scope = "function"  # or "module" or "session"

# Directories that are not visited by pytest collector:
norecursedirs = [
    ".*",
    "hooks",
    "*.egg",
    ".eggs",
    "dist",
    "build",
    "{arch}",
    "docs",
    ".tox",
    ".git",
    "__pycache__",
    "venv",
    "requirements*",
    "lib",
]
doctest_optionflags = [
    "NUMBER",
    "NORMALIZE_WHITESPACE",
    "IGNORE_EXCEPTION_DETAIL",
]

[tool.coverage.run]
branch = true
source = ["src", "tests"]
omit = ["**/test_*.py", "**/__main__.py"]

[tool.coverage.report]
fail_under = 70
show_missing = true
skip_covered = true
skip_empty = true
omit = [
    "*site-packages*",
    "*tests*",
    "*.tox*",
]
exclude_also = [
    "raise NotImplementedError",
    "pragma: no-coverage",
    "pragma: no-cov",
    "def __str__",
    "def __repr__",
]

[tool.coverage.html]
directory = "test-reports/htmlcov"
[tool.coverage.xml]
output = "test-reports/coverage.xml"

[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "v$version"
version_scheme = "pep440"
update_changelog_on_bump = true
bump_message = "bump: version $current_version â†’ $new_version"
annotated_tag = false

[tool.pydoclint]
style = "google"
exclude = '\.git|tests'
require-return-section-when-returning-nothing = false
arg-type-hints-in-docstring = false
check-return-types = false
skip-checking-raises = true
quiet = true
check-class-attributes = false

[tool.bumpversion]
current_version = "0.2.0"
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)"
serialize = ["{major}.{minor}.{patch}"]
search = "{current_version}"
replace = "{new_version}"
regex = false
ignore_missing_version = false
ignore_missing_files = false
tag = true
tag_name = "{new_version}"
tag_message = "Version updated from {current_version} to {new_version}"
sign_tags = false
allow_dirty = false
commit = true
message = "bump: up2date {current_version} â†’ {new_version}"
moveable_tags = []
commit_args = ""
setup_hooks = []
pre_commit_hooks = [
    "uv tool run git-cliff -r . -l --tag $BVHOOK_NEW_VERSION --prepend CHANGELOG.md",
    "git add CHANGELOG.md",
]
post_commit_hooks = []

[[tool.bumpversion.files]]
filename = "src/gitlab_ci/__init__.py"
